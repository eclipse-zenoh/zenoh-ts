#
# Copyright (c) 2024 ZettaScale Technology
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
#
name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  schedule:
    - cron: "0 6 * * 1-5"

jobs:
  check_rust:
      name: Check zenoh-ts using Rust 1.75
      runs-on: ubuntu-latest
      strategy:
        fail-fast: false
      steps:
        - uses: actions/checkout@v4
        - uses: dtolnay/rust-toolchain@1.75.0

        - uses: Swatinem/rust-cache@v2
          with:
            cache-bin: false

        - name: Check zenoh-ts with rust 1.75.0
          run: |
            cargo +1.75.0 check --release --bins --lib

  check:
    name: Lints and doc tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with: 
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          cache-bin: false

      - name: Code format check
        run: cargo fmt --check -- --config "unstable_features=true,imports_granularity=Crate,group_imports=StdExternalCrate"

      - name: Clippy
        run: cargo clippy --all -- -D warnings

  build-and-test:
    name: Build Rust plugin, start daemon with it and run typescript tests ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-bin: false

      - name: Build typescript plugin
        run: cargo build --release --all-targets

      - name: Run rust tests
        run: cargo test

      - name: Install zenohd for testing
        run: |
          cargo install cargo-run-bin
          cargo bin --install zenohd

  #     - name: Install Rust toolchain
  #       run: |
  #         rustup show
  #         rustup component add rustfmt clippy
  #     - name: Build
  #       run: cargo build --all-targets
  #     - name: Run tests
  #       run: cargo test
  #     - name: Cleanup
  #       run: cargo clean

  # build-ts:
  #   name: Build Rust plugin and TS API on ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macOS-latest, windows-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup rust-cache
  #       uses: Swatinem/rust-cache@v2
  #       with:
  #         cache-bin: false


  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "21"

  #     - name: Install Deno
  #       uses: denoland/setup-deno@v1
  #       with:
  #         deno-version: latest

  #     - name: Run install
  #       uses: borales/actions-yarn@v4
  #       with:
  #         cmd: install
  #         dir: "zenoh-ts"

  #     - name: Transpile Library
  #       uses: borales/actions-yarn@v4
  #       with:
  #         cmd: build
  #         dir: "zenoh-ts"
      
  #     - name: Run tests
  #       uses: borales/actions-yarn@v4
  #       with:
  #         cmd: start test ALL
  #         dir: "zenoh-ts"

      # - name: Install dependencies for deno examples
      #   uses: borales/actions-yarn@v4
      #   with:
      #     cmd: install
      #     dir: "zenoh-ts/examples/deno"

         
      # - name: Verify build for deno examples
      #   uses: borales/actions-yarn@v4
      #   with:
      #     cmd: verify
      #     dir: "zenoh-ts/examples/deno"
 
      # - name: Install dependencies for chat example
      #   uses: borales/actions-yarn@v4
      #   with:
      #     cmd: install
      #     dir: "zenoh-ts/examples/browser/chat"

      # - name: Verify build for chat example
      #   uses: borales/actions-yarn@v4
      #   with:
      #     cmd: build
      #     dir: "zenoh-ts/examples/browser/chat"

      # - name: Build and run tests
      #   uses: borales/actions-yarn@v4

  markdown_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DavidAnson/markdownlint-cli2-action@v18
        with:
          config: '.markdownlint.yaml'
          globs: '**/README.md'

  # NOTE: In GitHub repository settings, the "Require status checks to pass
  # before merging" branch protection rule ensures that commits are only merged
  # from branches where specific status checks have passed. These checks are
  # specified manually as a list of workflow job names. Thus we use this extra
  # job to signal whether all CI checks have passed.
  ci:
    name: CI status checks
    runs-on: ubuntu-latest
    needs: [check_rust, check, markdown_lint]
    if: always()
    steps:
      - name: Check whether all jobs pass
        run: echo '${{ toJson(needs) }}' | jq -e 'all(.result == "success")'
